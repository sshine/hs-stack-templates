{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0

homepage: https://github.com/{{github-username}}
author: {{author-name}}
maintainer: {{author-email}}
copyright: {{copyright}}
extra-source-files:
  - README.md

dependencies:
  - base
  - containers
  - text
  - mtl

library:
  exposed-modules:
  source-dirs: src

executables:
  {{name}}:
    source-dirs: app
    main: Main.hs

tests:
  test:
    main: test.hs
    source-dirs: test
    dependencies:
      - {{name}}
      - tasty
      - tasty-discover
      - tasty-hspec
      - tasty-quickcheck
      - QuickCheck
      - hspec

benchmarks:
  bench:
    main: bench.hs
    source-dirs: bench
    dependencies:
      - {{name}}
      - criterion
    ghc-options: -O2

{-# START_FILE Setup.hs #-}
import Distribution.Simple

main :: IO ()
main = defaultMain

{-# START_FILE app/Main.hs #-}
module Main where

main :: IO ()
main = return ()

{-# START_FILE test/test.hs #-}
{-# OPTIONS_GHC -F -pgmF tasty-discover #-}

{-# START_FILE test/SomeTest.hs #-}
module SomeTest where

import Test.Tasty.Hspec
import Test.Tasty.QuickCheck

spec_SomeSpec :: Spec
spec_SomeSpec = do
  describe "Safe.headMay" $ do
    it "returns the first element when it exists" $ do
      headMay "ABC"   `shouldBe` Just 'A'
      headMay ['A'..] `shouldBe` Just 'A'

    it "returns Nothing when the list is empty" $
      headMay ([] :: [Int]) `shouldBe` Nothing

prop_SomeProp :: Char -> String -> Property
prop_SomeProp c cs = property $ headMay (c:cs) == Just c

{-# START_FILE bench/bench.hs #-}
module Main where

import Criterion
import Criterion.Main

main :: IO ()
main = defaultMain
  [ bgroup "const" [ bench "const" $ whnf const () ] ]

{-# START_FILE README.md #-}
# {{name}}
